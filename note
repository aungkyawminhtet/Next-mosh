//notice
useParam() for when other page or components use id 
[...slug] is only work for multi router array. is not working when call one array eg: /apple/orange/pi
[[...slug]] is working both router array
queryString parameter => /product?orderBy=apple => use SearchParams or useSearchparams

server and client အတွက် next components သုံးဖို့ နှစ်ခုလုံးရှိတယ်။ eg: useRouter က cient မှာသုံးရတယ်။ Link က Server request မှာသုံးရတယ်။ other eg: params{id} == useParams();

suspense is used for when fetching data to sever.like loading. eg: <suspense callback={<p>Loading...</p>}></suspense>

//type ကို တခြားနည်းဖြင့် ကြေငြာခြင်း
interface UploadPageProps {
    public_id: string
}
const id = result.info as UploadPageProps;

not-found.tsx or notFound();

//lib
npm i -D daisyui@latest
npm i fast-sort@1.2.4
npm i react-icons
npm i zod
npm install @prisma/client
npm i next-cloudinary
npm install next-auth
npm i -D @types/bcrypt
npm i -D @types/lodash

//prisma usage
npx prisma => see all prisma commands
npx prisma init. => init prisma file
npx prisma format => format prisma file
npx prisma migrate dev => migrate prisma file
npx prisma generate
npx prisma db push
npm i react-email @react-email/components
npm install resend

//prisma find data
prisma.users.findMany => find all data
prisma.users.findUnique({where:{id:1}}) => find one data
const updatedUser = await prisma.user.update({
    where: { id: user.id },
    data: {
      name: body.name,
      email: body.email,
    },
  });
await prisma.user.delete({ where: { id: parseInt(id) },});


//docker create mysql container
docker pull mysql => create image
docker run -d --name mosh-mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=moshdb -p 3307:3306 mysql  => run container with port 3307 , with password and db name


//cloudinary usage
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME="<Your Cloud Name>"
NEXT_PUBLIC_CLOUDINARY_API_KEY="<Your API Key>"
https://demo.cloudinary.com/uw/#/     => to edit custom tools


//random generate Key
openssl rand -base64 32


//middleware parameter
* : zero or more
+ : one or more
? : zero or one

//bcrypt usage
bcrypt.hash(password, 10) => to hash password
bcrypt.compare(password, user.password) => to compare password


//external image , add in next.config.js
usagemodule.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**.example.com',
        port: '',
        search: '',
      },
    ],
  },
}
//image parameter
<Image src="/me.png" alt="Picture of the author" width={} fill objectFit="cover or contain" height={} priority quality={100} />


//google analytics script
<Script
strategy="afterInteractive"
src={`https://www.googletagmanager.com/gtag/js?id=${process.env.NEXT_PUBLIC_GA_ID}`}
/>
       
<Script
  id="google-analytics"
  strategy="afterInteractive"
  dangerouslySetInnerHTML={{
    __html: `
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', '${process.env.NEXT_PUBLIC_GA_ID}', {
    page_path: window.location.pathname,
    });
  `,
}}/>

//metaData example
//single page
export const metedata: Metadata = {
  title: "Service Page",
  description: "This is service page",
}

//dynamic page
export async function generateMetadata({params}: Props): Promise<Metadata>{
  const data = await fetch('');
  const title = data.name || "Service Page";
  return {
    title: title,
    description: "This is service page"
  }
}

//dynamic usage
import dynamic from 'next/dynamic';
const HeavyComponent = dynamic(() => import('../components/HeavyComponent'), {
  ssr: false,
  loading: () => <p>Loading...</p>
});

//.env example
DATABASE_URL="mysql://root:root@localhost:3307/moshdb"
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRECT=gyHSzH3cCzG9xML4wEtgcZJrsTnOa3q1SEDoCc8DIVU=
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRECT=
RESEND_API_KEY=
NEXT_PUBLIC_GA_ID=G-1X6Z3EJ6X1
